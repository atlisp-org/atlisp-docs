#+prefix: autolisp
* -,相减
** (– [number number] &rest)
将第一个数减去其他数的和并返回差值
* ~,非码
** (~ int)
返回参数的按位非（即 1 的补码）
* +,相加
** (+ [number number] &rest)
返回所有数的和
* =,相等
** (= numstr [numstr] &rest)
比较多个数字或字符串参数是否相等。
* 乘积
** (* [number number] &rest)
返回所有数的乘积
* /,除以
** (/ [number number] &rest)
将第一个数除以其他数的乘积并返回商
* 1+
** (1+ number)
将参数加 1
* <,小于
** (< numstr [numstr] &rest)
如果每个参数值都小于它右边的参数则返回 T，否则返回 nil
* <=,小于等于,不大于
** (<= numstr [numstr] &rest)
如果每个参数值都小于或等于它右边的参数则返回 T，否则返回 nil
* >,大于
** (> numstr [numstr] &rest)
如果每个参数值都大于它右边的参数则返回 T，否则返回 nil
* >=,大于等于,不小于
** (>= numstr [numstr] &rest)
如果每个参数值都大于或等于它右边的参数则返回 T，否则返回 nil
* abs,绝对值
** (abs number)
返回参数的绝对值
* acad_colordlg, 颜色选择对话框
** (acad_colordlg colornum [flag])
显示标准的 AutoCAD 颜色选择对话框
* acad_helpdlg
** (acad_helpdlg helpfile topic)
启动帮助工具（已废弃）
* acad_strlsort
** (acad_strlsort lst)
以ASCII码字母顺序对字符串表进行排序
* action_tile
** (action_tile "key" "action-expression")
为某一对话框控件指定一个动作表达式，用户在对话框中选中这个控件时，就会执行该动作表达式.
action_tile指定的操作将取代对话框的默认操作（由new_dialog指定）或 Tile 的操作属性（如果已指定）。
表达式 action-expression 中可以将 Tile 的当前值称为$value，将其名称称为$key，
将其特定于应用程序的数据（由client_data_tile设置）称为$data，将其回调原因称为$reason，将其图像坐标（如果磁贴是图像按钮）称为 $x和$y。
注意: 不能用 action_tile 调用 autolisp 的 command 函数。
* add_list
** (add_list "string")
在当前激活的对话框的列表框中增加一个字符串或修改其中的一个字符串
* ads
** (ads)
此函数将返回一串目前装入的AutoCAD高级开发系统(ADS)应用程序。每一个应用程序和它的路径在这个表中都是一个以引号括起来的字符串。
* alert,警告框
** (alert "string")
显示一个警告框，其中显示一条出错或警告信息
* alloc
** (alloc n-alloc)
设置段长度以供 expand 函数使用
* 函数and
** (and [expr &rest])
返回表达式的逻辑与 (AND) 运算结果
* angle,弧度
** (angle pt1 pt2)
以弧度为单位返回两点之间连线与当前 UCS 下 X 轴之间的夹角
* angtof,角度转实数
** (angtof "string" [units])
将表示角度的字符串转换为实数（浮点数）形式的弧度值
* angtos,角度转字符串
** (angtos angle [unit [precision]])
将一个以弧度为单位的角度值转换成字符串
* append,组合表
** (append [lst &rest])
将任意多个表组合成一个表
* apply
** (apply 'function lst)
传递一个列表作为指定函数的参数，并执行该函数
详见： https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E8%BF%9B%E9%98%B6/lisp.org
* 函数arx
** (arx)
此函数将返回一个目前已装入的 ARX 应用程序的表。
* arxload
** (arxload application [onfailure])
加载 ObjectARX 应用程序
* arxunload
** (arxunload application [onfailure])
卸载 ObjectARX 应用程序
* ascii
** (ascii "string")
将字符串中的第一个字符转换成其 ASCII 码(整数)后返回
* assoc
** (assoc element alist)
从关联表中搜索一个元素，如果找到则返回该关联表条目
详见：
https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E5%85%A5%E9%97%A8/1-lisp.org
* atan,反正切值
** (atan num1 [num2])
返回一个数的反正切值（以弧度为单位）
* atof,字符串转实数
** (atof "string")
将一个字符串转换成实数
* atoi,字符串转整数
** (atoi "string")
将一个字符串转换成整数
* atom
** (atom item)
验证一个项是否是原子
* atoms-family
** (atoms-family |0,1| [symlist])
返回当前系统中已定义的符号的列表
0 返回符号, 1 返回符号的字符串名
symlist: 字符串列表，用于指定要搜索的atoms族的符号名称。
* autoarxload
** (autoarxload filename cmdlist)
预定义可自动加载某相关 ObjectARX 应用程序的命令名
* autoload
** (autoload filename cmdlist)
预定义可自动加载某相关 AutoLISP 应用程序的命令名
* autoxload
** (autoxload filename cmdlist)
此函数是事先定义命令名称来装入一已连接的 ADS 应用程序。
* /=
** (/= numstr [numstr] &rest)
比较参数是否值不相等
* boole,布尔运算
** (Boole |operator,1,6,7,8| int1 [int2&rest])
用作一个通用的按位逻辑运算函数
*** operator
Type: Integer
0 - 15 之间的整数
*** int1, int2...
Type: Integer
A numeric value.
注意:boole will accept a single integer argument, but the result is unpredictable.

*** Boole function bit values
Operator Operation Resulting bit is 1 if
1 AND Both input bits are 1
6 XOR Only one of the two input bits is 1
7 OR Either or both of the input bits are 1
8 NOR Both input bits are 0 (1's complement)

您可以使用运算符的其他值来执行没有标准名称的其他布尔运算。例如，如果运算符为4，则如果相应的位设置在int2而不是int1中，则设置结果位.
* boundp
** (boundp sym)
检验符号是否被设置为某个值
* car
** (car lst)
返回表的第一个元素
* cdr
** (cdr lst)
返回去掉了第一个元素的表或点对表的第二个元素
* chr
** (chr integer)
将代表字符 ASCII 码的整数转换成包含相应的单一字符的字符串
* client_data_tile
** (client_data_tile key clientdata)
将特定应用数据与一个对话框控件相关联
* 函数close
** (close file-desc)
关闭一个已打开的文件
* command
** (command [arguments] &rest)
执行一条 AutoCAD 命令
* command-s
** (command [arguments] &rest)
执行一条 AutoCAD 命令，可用于*error*中。
* cond
** (cond [(test result &rest) &rest])
多条件、多处理结果函数
详见：
https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E5%85%A5%E9%97%A8/1-lisp.org
* cons
** (cons new-first-element list-or-atom)
向表的头部添加一个元素，或构造一个点对
详见：
https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E5%85%A5%E9%97%A8/1-lisp.org
* cos,余弦值
** (cos ang)
返回弧度角度的余弦值
* cvunit,单位转换
** (cvunit value from-unit to-unit)
在不同测量单位之间进行换算
* defun,定义函数
** (defun NAME (arguments / private-variables) "函数功能说明" "函数返回值" exprs)
定义函数
详见：
https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E5%85%A5%E9%97%A8/1-lisp.org

* defun-q,将函数定义为列表形式
** (defun-q NAME (arguments / private-variables) "函数功能说明" "函数返回值" exprs)
将函数定义为列表形式，可以明文查看函数的定义。

* defun-q-list-ref,显示使用defun-q定义的函数的列表结构
** (defun-q-list-ref 'function)
显示使用defun-q定义的函数的列表结构
* defun-q-list-set,将符号的值设置为列表定义的函数
** (defun-q-list-set 'sym list)
将符号的值设置为列表定义的函数

* defvar
** (defvar *sym* value)
定义全局变量。习惯上一般以 * 号包围名字，使用 defvar 设置的变量，可以显示在 vscode 的大纲中，需要@lisp支持。
在 cl 中，只有 sym 为 nil 时，才会赋值。
* defparameter
** (defparameter *sym* value)
定义全局变量。习惯上一般以 * 号包围名字，使用 defparameter 设置的变量，可以显示在 vscode 的大纲中，需要@lisp支持。
在 cl 中，不同于 defvar, 该函数总是将 value 赋值给 sym 。
* defconstant
** (defconstant +sym+ value)
设置变量。习惯上一般以 + 号包围名字，使用 defparameter 设置的变量，可以显示在 vscode 的大纲中，需要@lisp支持。
在 cl 中，不同于 defvar, 该函数总是将 value 赋值给 sym 。
* dictadd
** (dictadd ename symbol newobj)
在指定词典内添加非图形对象
* dictnext
** (dictnext ename [rewind])
查找词典中的下一个条目
* dictremove
** (dictremove ename symbol)
从指定词典中删除一个条目
* dictrename
** (dictrename ename oldsym newsym)
重命名词典条目
* dictsearch
** (dictsearch ename symbol [setnext])
在词典中搜索某个项
* dimx_tile
** (dimx_tile key)
返回控件的宽度
* dimy_tile
** (dimy_tile key)
返回控件的高度
* 函数distance
** (distance pt1 pt2)
返回两个点之间的距离
* distof
** (distof "string" [mode])
将一个表示实（浮点）数的字符串转换成一个实数
* done_dialog
** (done_dialog [status])
中断对话框
* end_image
** (end_image)
结束当前激活的对话框图像控件的操作
* end_list
** (end_list)
结束对当前激活的对话框列表的操作
* entdel,删除图元
** (entdel ename)
删除对象（图元）或恢复先前删除的对象
* entget
** (entget ename [applist])
获得对象（图元）的定义数据
* entlast
** (entlast)
返回图形中最后那个未删除的主对象（图元）名称
* entmake,创建图元
** (entmake [elist])
在图形中创建一个新图元
* entmakex
** (entmakex [elist])
创建一个新对象或图元，赋给它一个句柄和图元名（但不指定所有者)
并返回新图元的名称
* entmod,修改图元
** (entmod elist)
修改对象（图元）的定义数据
* entnext
** (entnext [ename])
如果调用entnext时没有参数，则返回数据库中第一个未删除实体的实体名。如果向entnext提供了一个ename参数，则函数返回数据库中ename后面第一个未删除实体的实体名。如果数据库中没有下一个实体，则返回nil。entnext函数返回主实体和子实体。
* entsel,选择图元
** (entsel "[msg]")
提示用户通过指定一个点来选择单个对象（图元）
* entupd,更新图元
** (entupd ename)
更新对象（图元）的屏幕显示
* eq
** (eq expr1 expr2)
检测测试两个表达式是否具有相同的约束条件。
其指向结果必需相同。如  (eq '(1 2)'(1 2))返回nil（两个表达式的元素相同，但是不是同一个表，所以返回nil）
* equal,等价
** (equal expr1 expr2 [fuzz])
检测测试两个表达式的值是否相等或在一定误差范围内约等。
* *error*
** (*error* "string")
可由用户定义的错误处理函数
* eval,求值
** (eval expr)
返回 AutoLISP 表达式的求值结果
* exit
** (exit)
强行使当前应用程序退出
* exp,自然反对数
** (exp num)
返回常数 e (2.718282...) 的指定次幂（自然反对数）
* expand
** (expand n-expand)
为 AutoLISP 分配附加空间
* expt,求幂,求平方,求立方
** (expt number power)
返回以某指定数为底数的若干次幂的值.
平方: (expt number 2)
立方: (expt number 3)
* fill_image
** (fill_image x1 y1 width height color)
在当前激活的对话框图像控件中画一个填充矩形
* findfile,搜索文件
** (findfile filename)
在 AutoCAD 库路径中搜索指定文件或目录
* fix,取整
** (fix number)
截去实数的小数部分，将它转换成整数后返回该整数
* float,转浮点数
** (float number)
将一个数转换为实数后返回
* foreach
** (foreach name lst [exprs])
将表中的所有成员以指定变量的身份带入表达式求值
* function
** (function |symbol,lambda-expr|)
告诉Visual LISP编译器链接和优化参数，就像它是内置函数一样.
将函数函数添加到表达式后，编译器可以优化lambda表达式。例如：
(mapcar (function (lambda(x)(* x x))) '(1 2 3))
* gc
** (gc)
强制收集无用数据，释放不再使用的节点
* gcd,最大公约数
** (gcd int1 int2)
返回两个整数的最大公约数
* getangle
** (getangle [pt] "[msg]")
暂停以等待用户输入角度，然后以弧度形式返回该角度
* get_attr
** (get_attr key attribute)
获取对话框指定控件的某个属性值
* getcfg
** (getcfg cfgname)
从 acad.cfg 文件的 AppData 段中检索应用数据
* getcname
** (getcname cname)
获取 AutoCAD 命令的本地化名或英文名
* getcorner
** (getcorner pt "[msg]")
暂停等待用户输入矩形第二个角点的坐标
* getdist
** (getdist [pt] "[msg]")
暂停以等待用户输入距离
* getenv
** (getenv "variable-name")
以字符串方式返回指定的环境变量的值
* getfiled
** (getfiled "title" "default-path" "ext" flags)
用标准的 AutoCAD 文件对话框提示用户输入一个文件名，并返回该文件名。
default: 默认路径
ext:扩展表。不含 .
flags:
控制对话框行为的整数值（位编码字段）。要一次设置多个条件，请将这些值相加，以创建一个介于0和15之间的标志值。getfield可以识别以下标志参数：

1（位0）--提示输入要创建的新文件的名称。当提示打开现有文件的名称时，不要设置此位。在后一种情况下，如果用户输入不存在的文件名，对话框将在底部显示错误消息。如果设置了此位，并且用户选择了一个已经存在的文件，AutoCAD将显示一个警告框，并提供继续或取消操作的选择。

4（位2）--让用户输入任意文件扩展名，或者根本不输入扩展名。
如果未设置此位，getfield只接受ext参数中指定的扩展名，如果用户未在file文本框中输入扩展名，则将此扩展名附加到文件名。

8（位3）——如果设置了该位，而未设置位0，getfield将对输入的文件名执行库搜索。如果它在库搜索路径中找到文件及其目录，则会删除路径并仅返回文件名。（如果发现同名文件位于不同的目录中，则不会删除路径名。）
如果未设置该位，getfield将返回整个文件名，包括路径名。
如果使用对话框打开要在图形（或其他数据库）中保存其名称的现有文件，请设置此位。

16（位4）--如果设置了此位，或者默认参数以路径分隔符结尾，则该参数仅被解释为路径名。getfield函数假定没有默认文件名。它在“查找范围：”行中显示路径，并将“文件名”框留空。

32（位5）--如果设置了此位，并且设置了位0（表示正在指定一个新文件），则用户将不会收到覆盖现有文件的警告。不会显示警告用户已存在同名文件的警告框；旧文件将被替换。

64（位6）--如果用户指定了URL，则不要传输远程文件。

128（位7）--根本不允许URL。
** 示例
(getfield "指定图片文件" "D:\\" "png" 8)
* getint
** (getint "[msg]")
暂停以等待用户输入一个整数并返回该整数
* getkword
** (getkword "[msg]")
暂停以等待用户输入一个关键字并返回该关键字
* getorient
** (getorient [pt] "[msg]")
暂停以等待用户输入角度，并返回该角度
pt 相对点
* getpoint
** (getpoint [pt] "[msg]")
暂停以等待用户输入点，并返回该点
pt 相对点
* getreal
** (getreal "[msg]")
暂停以让用户输入一个实数并返回该实数
* getstring
** (getstring [cr] "[msg]")
暂停以等待用户输入字符串，并返回该字符串
cr : T or nil 控制输入的字符串能否含有空格。
* get_tile
** (get_tile key)
获取对话框指定控件的当前运行时的值
* getvar
** (getvar "varname")
获取一个 AutoCAD 系统变量的值
* 函数graphscr
** (graphscr)
显示 AutoCAD 图形屏幕
* grclear
** (grclear)
清除当前视口（已废弃）
* grdraw
** (grdraw from to color [highlight])
在当前视口中的两个点之间显示一条矢量线
* grread
** (grread [track] [allkeys [curtype]])
从 AutoCAD 的任何一种输入设备中读取数值
*** track
类型:t or nil
如果提供而不是nil，则此参数允许在移动定点设备时从定点设备返回坐标。
*** allkeys
类型：Integer

告诉grread要执行哪些函数的代码。可以将allkeys位代码值添加在一起以实现组合功能。可以指定以下值：

1（位0）--返回拖动模式坐标。如果设置了此位，并且用户移动定点设备而不是选择按钮或按键，grread将返回一个列表，其中第一个成员是类型5，第二个成员是当前定点设备（鼠标或数字化仪）位置的（X，Y）坐标。AutoCAD就是这样实现拖动的。

2（位1）——返回所有键值，包括功能和光标键代码，并且在用户按下光标键时不移动光标。

4（第2位）--使用curtype参数中传递的值来控制光标的显示。

8（第3位）--当用户按下Esc时，不显示错误：控制台中断消息。

*** curtype
一个整数，指示要显示的光标类型。必须设置位2的allkeys值才能使curtype值生效。curtype参数在当前grread函数调用期间仅影响游标类型。您可以为curtype指定以下值之一：

0 显示普通十字光标。

1 不显示光标（无十字光标）。

2 显示对象选择“目标”光标。
* grtext
** (grtext [box text [highlight]])
将文本写到状态行或屏幕菜单区
* grvecs
** (grvecs vlist [trans])
在图形屏幕上绘制多个矢量
* handent,句柄
** (handent handle)
根据对象（图元）的句柄返回它的对象（图元）名
* if,条件分支
** (if testexpr thenexpr [elseexpr])
根据对条件的判断结果，对两个表达式求值
详见：
https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E5%85%A5%E9%97%A8/1-lisp.org
* initget
** (initget [bits] "[string]")
为随后的用户输入函数调用创建关键字

* inters,求交点
** (inters pt1 pt2 pt3 pt4 [onseg])
求两条直线的交点
* itoa,整数转字符串
** (itoa int)
将整数转换成字符串，并返回转换结果
* lambda,匿名函数
** (lambda arguments expr &rest)
定义无名函数
详见： https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E8%BF%9B%E9%98%B6/lisp.org
* last
** (last lst)
返回表的最后一个元素
* length,求表长度
** (length lst)
以整数形式返回表中元素的数目
* list
** (list [expr &rest])
将任意数目的表达式组合成一个表
详见：
https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E5%85%A5%E9%97%A8/1-lisp.org
* listp
** (listp item)
检查某个项是否是表
* load
** (load filename [onfailure])
此函数将装入一个包含AutoLISP表达式的文件， 同时判别这些表达式。filename是一个代表文件名称的字符串， 而且不须加上扩展名(因为扩展名.lsp是自动设定)。
* load_dialog
** (load_dialog dclfile)
加载 DCL 文件
* log,求自然对数
** (log num)
返回一个实数的自然对数
* logand,逻辑与
** (logand [int int &rest])
返回一个整数表中的各数按位逻辑与 (AND) 的结果
* logior,逻辑或
** (logior [int int &rest])
返回一个整数表中的各数按位逻辑或 (OR) 的结果
* lsh,逻辑移位
** (lsh int numbits)
返回某整数作指定次逻辑移位后的结果
* mapcar
** (mapcar 'function list1 &rest listn)
循环取list1至listn相同位置的元素同时作为function的参数进行求值，并将求值结果构成的表返回
详见： https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E8%BF%9B%E9%98%B6/lisp.org
* max
** (max [number number &rest])
返回给定各数中的最大者
* mem
** (mem)
显示 AutoLISP 内存的当前状态
* member
** (member expr lst)
搜索表中是否包含某表达式，并从该表达式的第一次出现处返回表的其余部分
详见：
https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E5%85%A5%E9%97%A8/1-lisp.org
* menucmd
** (menucmd "string")
发出菜单命令，或设置并检索菜单项状态
* menugroup
** (menugroup groupname)
检查是否加载了指定的菜单组
* min
** (min [number number &rest])
返回给定各数中的最小者
* minusp,检查负数
** (minusp num)
检查某个数是否是负数
* mode_tile
** (mode_tile "key" |mode,0,1,2,3,4|)
设置对话框控件的状态
mode 
0 -- 使框件可用
1 -- 不可用
2 -- 获得焦点
3 -- 选择编辑框内容
4 -- 点击图像高亮与否
* namedobjdict
** (namedobjdict)
返回当前图形的命名对象词典的图元名，它是所有非图形对象的根
* nentsel
** (nentsel "[msg]")
提示用户指定点来选择对象（图元），得到这个对象所指片段的对象名
* nentselp
** (nentselp "[msg]" [pt])
在没有用户输入的情况下，本函数的功能与 nentsel 函数类似
* new_dialog
** (new_dialog dlgname dcl_id [action [screen-pt]])
开始一个新的对话框并显示该对话框，而且能指定一个缺省操作
* not
** (not item)
检查一个项的求值结果是否为 nil
* nth
** (nth n lst)
返回表中的第 n 个元素，n为自然数（非负整数）。
* null
** (null item)
检查某项的值是否设置为 nil
* numberp
** (numberp item)
检查某个项是否是实数或整数
* 函数open,打开文件
** (open filename "|r,w,a|")
打开一个文件，供其他 AutoLISP I/O 函数访问
mode: "r" 读取 "w" 写 "a" 追加
** 示例
(setq fp (open (findfile "acad.pgp") "r"))
(read-line fp)
(close fp)
* openutf8,打开utf8文件
** (open filename "|r,w,a|" "utf8")
打开一个utf8编码文件，供其他 AutoLISP I/O 函数访问

需CAD2021及以后的版本，且 lispsys = 1 或 2
mode: "r" 读取 "w" 写 "a" 追加
** 示例
(setq fp (open (findfile "acad.pgp") "r" "utf8"))
(read-line fp)
(close fp)
* or
** (or [expr &rest])
返回对表达式进行逻辑或 (OR) 运算的结果
* 函数osnap
** (osnap pt mode)
将某种对象捕捉模式作用于指定点而获得一个点，并返回该点
* polar
** (polar pt ang dist)
在 UCS 坐标系下，求某点的指定角度和指定距离处的点，并返回该点
* prin1,原样输出
** (prin1 [expr [file-desc]])
在命令行打印表达式，或将表达式写入已打开的文件中，其结果可用 read 读入。
* princ,输出
** (princ [expr [file-desc]])
在命令行打印表达式，或将表达式写入已打开的文件中，处理转义。
* print
** (print [expr [file-desc]])
在命令行打印表达式，或将表达式写入已打开的文件中，原样输出。
* progn
** (progn [expr] &rest)
顺序地对每一个表达式进行求值，并返回最后那个表达式的值
详见： https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E8%BF%9B%E9%98%B6/lisp.org
* prompt,屏幕提示
** (prompt msg)
在屏幕提示区显示一个字符串
* 函数quit
** (quit)
强制退出当前应用程序
* quote
** (quote expr)
返回表达式而不对其求值
详见：
https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E5%85%A5%E9%97%A8/1-lisp.org
* read
** (read "[string]")
返回字符串中的第一个表或第一个原子
* read-line
** (read-line [file-desc])
从键盘或已打开文件中读取行结束符前的字符串
* 函数redraw
** (redraw [ename [mode]])
重画当前视口或当前视口中的一个指定对象（图元）
mode <Integer>
1 -- 显示
2 -- 隐藏(blank it out)
3 -- 亮显
4 -- 不亮显
The use of entity highlighting (mode 3) must be balanced with entity unhighlighting (mode 4).
* regapp
** (regapp application)
为当前 AutoCAD 图形注册一个应用名，为使用扩展对象数据作准备
* rem,求余数
** (rem [number number &rest])
将第一个数除以第二个数，并返回余数
* repeat,循环指定次数
** (repeat int [expr &rest])
对循环体中的每一个表达式进行指定次数的求值计算，并返回最后一个表达式的值
* 函数reverse
** (reverse lst)
将表的元素顺序倒置后返回
* rtos,数字转字符串
** (rtos number [mode [precision]])
将数字转换成字符串
* set,赋值到符号
** (set 'sym expr)
将引号中的符号名的值设置成一个表达式的值
* setcfg
** (setcfg cfgname cfgval)
将应用数据写到 acad.cfg 文件的 AppData 段中
* setfunhelp
** (setfunhelp c:fname [helpfile [topic [command]]])
给帮助工具注册一个用户定义函数，这样，用户在请求该命令的帮助时，就会调用正确的帮助文件和主题
* setq,赋值
** (setq sym expr)
将一个或多个符号的值设置为相应表达式的值
[sym expr] 可以重复，以实现多个赋值
* set_tile
** (set_tile "key" "value")
设置对话框控件的值
* 函数setvar
** (setvar "varname" value)
设置 AutoCAD 系统变量为指定值，varname 为只读时会提示被拒。value值的类型需与 varname 所需的类型一致。
* setview
** (setview view_descriptor [vport_id])
为指定视口建立一个视图
* sin,正弦
** (sin ang)
以实数形式返回角度的正弦值（以弧度为单位）
* slide_image
** (slide_image x1 y1 width height "sldname")
在当前激活的对话框图像控件中显示 AutoCAD 幻灯片
* snvalid
** (snvalid sym_name [flag])
检查组成符号表名的各字符的有效性
* sqrt,平方根
** (sqrt num)
以实数形式返回一个数的平方根
* ssadd
** (ssadd [ename [ss]])
将对象（图元）加入到选择集中，或创建新的选择集
* ssdel
** (ssdel ename ss)
从选择集中撤消对象（图元）
* ssget,生成选择集
** (ssget "|[method],c,w,cp,wp,x,l,i,p,:E,:S,:S:E,:D,:L|" [pt1 [pt2]] [pt-list] [filter-list])
根据选定对象创建选择集
** 用法
*** 两点参数:c 反选 w 正选
(ssget "c" pt1 pt2 [filter-list])
*** 点列表参数:多边形cp wp，f栏选
(ssget "cp" pt-list [filter-list])
*** 无点参数的选择模式
(ssget "p" [filter-list]) ;; 上一个选择集
l 最后创建的 (entlast)
i 隐含选择，先选择后执行
x 整个文件
:E 用鼠标拾取框选择对象
:S 点选一次
:S:E 
:D 可重复
:L 不选择锁定图层对象

详：https://gitee.com/atlisp/atlisp-docs/blob/main/AutoLisp/ssget.org
* ssgetfirst
** (ssgetfirst)
判断哪些对象是被选取的和被夹取的，使用该函数可以实现先选择后执行。
* sslength
** (sslength ss)
求出一个选择集中的对象（图元）数目，并将其作为一个整数返回
* ssmemb
** (ssmemb ename ss)
测试某对象（图元）是否是选择集的成员
* ssname
** (ssname ss index)
返回选择集中由序号指定的那个对象（图元）的图元名
* ssnamex
** (ssnamex ss [index])
获取关于选择集创建方式的信息
* sssetfirst
** (sssetfirst gripset [pickset])
设置哪些对象既是被选取的又是被夹取的。
gripset: 一般为 nil.
* startapp,启动外部程序
** (startapp appcmd [file])
启动 Windows 应用程序
* start_dialog,显示对话框
** (start_dialog)
显示对话框并将控制交给对话框
* start_image
** (start_image key)
开始对对话框控件中的一个图像控件进行操作
* start_list
** (start_list key [operation [index]])
开始处理对话框中的列表框或弹出式列表框中的列表
* strcase,字母转大写,字母转小写
** (strcase "string" [lcase])
返回所有字母大写的字符串(如果 lcase 不为 nil 则小写)
* strcat,组合字符串
** (strcat "string" "[strings]")
返回从左到右拼接后的字符串
* strlen,字符串长度
** (strlen "[string]" &rest)
以整数形式返回一个字符串中字符的个数(不一定是字节长度)
unicode版本每个字的长度为 1. 
* subst,替换表项,替换表元素
** (subst newitem olditem lst)
在表中搜索某旧项，并将表中出现的每一个旧项用新项代替，然后返回修改后所得的表
详见：
https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E5%85%A5%E9%97%A8/1-lisp.org
* substr,求子串
** (substr "string" start [length])
返回字符串中的一个子字符串，字符串中的第一个字符的位置为 1
* 函数tablet
** (tablet code [row1 row2 row3 direction])
获取和设置数字化仪校准
* tblnext
** (tblnext "|block,dimstyle,layer,ltype,style,ucs,view,vport,appid|" [rewind])
在符号表中查找下一项。当 rewind 为 t 时，指向符号表的第一项。
* tblobjname
** (tblobjname "|block,dimstyle,layer,ltype,style,ucs,view,vport,appid|" symbol)
返回指定符号表条目的图元名
* tblsearch
** (tblsearch "|block,dimstyle,layer,ltype,style,ucs,view,vport,appid|" symbol [setnext])
在指定的符号表中搜索符号名
* term_dialog
** (term_dialog)
终止当前所有的对话框，就象用户取消了它们一样
* terpri
** (terpri)
在命令行上输出一个换行符
* textbox
** (textbox elist)
测量一个指定文本对象的尺寸，并返回围住该文本的一个矩形框的对角坐标
* textpage
** (textpage)
从图形屏幕切换至文本屏幕
* 函数textscr
** (textscr)
切换至文本屏幕（相当于 AutoCAD Flip Screen 功能键）
* trace,调试跟踪
** (trace [function &rest])
调试 AutoLISP 程序时的辅助函数
* trans,坐标换算,坐标转换
** (trans pt from to [disp])
将 pt 坐标(3维点)从坐标系换算到坐标系disp:

非 nil 则以3维位移量的转换模式来换算 pt
from to: 
  0 表示 WCS
  1 表示当前 UCS
  2 搭配码 0 1 时，表示当前视口的显示坐标系 DCS
    搭配码 3 时，表示当前模型空间视口的 DCS
  3 图纸空间 DCS，仅搭配码 2 
* 函数type
** (type item)
返回指定项的数据类型
* unload_dialog
** (unload_dialog dcl_id)
卸载 DCL 文件
* untrace,清除跟踪
** (untrace [function &rest])
清除指定函数的跟踪标志
* vector_image
** (vector_image x1 y1 x2 y2 color)
在当前激活的对话框图像控件上显示一个矢量线
* 函数ver
** (ver)
返回当前 AutoLISP 版本号的字符串
* 函数vports
** (vports)
返回表示当前视口配置的视口描述符表
* wcmatch,字符匹配,通配符
** (wcmatch "string" pattern)
将模式字符串与某指定的字符串进行匹配比较
** 通配符
#（pound） 匹配任何单个数字。
@（at）    匹配任何单个字母字符。
.（period）匹配任何单个非字母数字字符。
*（星号）  匹配任何字符序列，包括空字符序列，它可以在搜索模式中的任何位置使用：在开头、中间或结尾。
? (问号) 匹配任何单个字符。
~（波浪号）如果它是模式中的第一个字符，那么它将匹配除模式之外的任何字符。
[...]      匹配包含的任何一个字符。
[~...]     匹配任何未括起来的单个字符。
-（连字符）在括号内用于指定单个字符的范围。
，（逗号） 分隔两个匹配模式。
`（反引号）转义特殊字符（逐字读取下一个字符）。
* while
** (while testexpr [expr &rest])
对测试表达式进行求值，如果它不是 nil，则执行循环体中的表达式，重复这个过程，直到测试表达式的求值结果为 nil
* write-char
** (write-char num [file-desc])
将一个字符写到屏幕上或一个已打开的文件中
* write-line
** (write-line "string" [file-desc])
将字符串写到屏幕上或一个已打开的文件中
* xdroom
** (xdroom ename)
返回对象可供使用的扩展数据 (Xdata) 空间的大小
* xdsize
** (xdsize lst)
返回一个表作为扩展数据连接到对象（图元）上时所占用的空间大小（以字节表示）
* xload
** (xload application [onfailure])
这个函数将装入一个AutoCAD高级开发系统(ADS)的应用程序。
* xunload
** (xunload application [onfailure])
此函数将卸载一个ADS应用程序。如果应用程序被成功地卸下。那么， 应用程序的名称将被返回。否则， 一个错误信息将被发出。
* zerop
** (zerop number)
检查一个数的值是否为 0
* bpoly
** (bpoly pt [ss vector])
搜索点附近曲线，生成最小边界
* cddr
** (cddr lst)
返回去掉了前两个元素的表
* cdddr
** (cdddr lst)
返回去掉了前三个元素的表
* cddddr
** (cddddr lst)
返回去掉了前四个元素的表
* cdddar
** (cdddar lst)
返回表内第一个表，并去掉前三个元素。
* cddar
** (cddar lst)
返回表内第一个表，并去掉前两个元素
* cddadr
** (cddadr lst)
取坐标用1
* cddaar
** (cddaar lst)
取坐标用2
* cdar
** (cdar lst)
返回表内第一个表中去掉了第一个元素的表
* cdadr
** (cdadr lst)
获取表第二个元素，然后再去除第一个元素
* cdaddr
** (cdaddr lst)
取坐标用3
* cdadar
** (cdadar lst)
返回表内第一个子表的第二个子表，且去掉第一个元素！
* cdaar
** (cdaar lst)
返回三层表以上，一层第1项，二层第1项，三层除掉第1项数据
* cdaadr
** (cdaadr lst)
数据库中没有收录这个函数!
* cdaaar
** (cdaaar lst)
返回4层表，一层第1项，二层第1项，三层第1项，四层去掉第一项数据
* cadddr
** (cadddr lst)
返回表的第四个元素（易云网络）
* caddar
** (caddar lst)
返回表内第一个表的第三个元素。
* cadar
** (cadar lst)
返回表内第一个表的第二个值
* cadadr
** (cadadr lst)
返回表内第二个表的第二个值
* cadaar
** (cadaar lst)
返回第三个内表里面的第一个值
* caar
** (caar lst)
返回表内的第一个子表的第一个值
* caadr
** (caadr lst)
反回表内第二个表的第一个值
* caaddr
** (caaddr lst)
反回表内第三个表的第一个值
* caadar
** (caadar lst)
相当于(car(car(cdr(car lst))))
* caaar
** (caaar lst)
第3级子表的第一个元素
相当于(car(car(car lst)))
* caaadr
** (caaadr lst)
相当于(car(car(car(cdr lst))))的简写
* caaaar
** (caaaar lst)
第4级子表的第一个元素
* vl-string->list
** (vl-string->list "string")
将字符串转换为字符代码表
* vl-princ-to-string
** (vl-princ-to-string data)
返回 LISP 数据的字符串表示，就象它是由 princ 函数输出的一样
* vl-mkdir,创建目录
** (vl-mkdir directoryname)
创建目录
* vl-list-loaded-vlx
** (vl-list-loaded-vlx)
返回与当前文档相关联的所有独立名称空间 VLX 文件
* vl-filename-directory
** (vl-filename-directory filename)
去掉文件的名称和扩展名，返回文件的路径。
* vl-list*
** (vl-list* object [object] &rest)
构造并返回表
* _vl-times
** (_vl-times)
下面是用法
(setq start (car (_vl-times)))
;测试代码
(/(-(car (_vl-times))start)1000.)
计时器函数，可用于计算程序运行效率
* vl-infp
** (vl-infp num)
(vl-infp 333) 返回nil
(vl-infp 1e2222) 返回T，判断一个数是否无穷大
* vl-bt
** (vl-bt)
错误跟踪
* vl-acad-defun
** (vl-acad-defun 'symbol)
将 Visual LISP 函数符号定义为外部子例程
* vl-acad-undefun
** (vl-acad-undefun 'symbol)
取消对 Visual LISP 函数符号的定义，使 ObjectARX 应用程序不能再使用它。
* vl-arx-import
** (vl-arx-import [function-or-application])
将 ObjectARX/ADSRX 函数输入到独立名称空间 VLX
* vl-bb-ref
** (vl-bb-ref 'variable)
返回黑板名称空间中变量的值
* vl-bb-set
** (vl-bb-set 'symbol value)
设置黑板名称空间中的变量
* vl-catch-all-apply
** (vl-catch-all-apply 'function lst)
将参数表传递给指定函数并截取错误
* vl-catch-all-error-message
** (vl-catch-all-error-message error-obj)
从错误对象返回字符串
* vl-catch-all-error-p
** (vl-catch-all-error-p arg)
检测测试参数是否是 vl-catch-all-apply 返回的错误对象
* vl-cmdf
** (vl-cmdf [arguments] &rest)
执行 AutoCAD 命令
* vl-consp
** (vl-consp list-variable)
检测测试表是否不为 nil
* vl-directory-files
** (vl-directory-files "directory" "|pattern,*.*,*.dwg|" |directories,-1,0,1|)
获取指定目录中的所有文件列表，三个参数均可省略。
directory : 指定的目录,默认为当前 dwg文件所在目录
pattern : 匹配字符串 当为 nil时,等同于"*.*"
directorys: -1 只列出目录，0 列出目录和文件，1 只列出文件

返回值:列表 或 nil

* vl-doc-export
** (vl-doc-export 'function)
使函数在当前文档中可用
* vl-doc-import
** (vl-doc-import application [’function &rest])
将早先输出的函数输入到 VLX 名称空间
* vl-doc-ref
** (vl-doc-ref 'symbol)
从当前文档名称空间中获取变量的值
* vl-doc-set
** (vl-doc-set 'symbol value)
设置当前文档名称空间中变量的值
* vl-every
** (vl-every predicate-function lst [lst] &rest)
检查论断结合每个元素后是否均为真
* vl-exit-with-error
** (vl-exit-with-error msg)
将控制从 VLX 错误处理器传递给调用它的名称空间的 *error* 函数
* vl-exit-with-value
** (vl-exit-with-value value)
将值返回到从其他名称空间调用 VLX 的函数
* vl-file-copy
** (vl-file-copy source-file destination-file [append])
将一个文件的内容复制或附加到另一个文件
* vl-file-delete
** (vl-file-delete filename)
删除文件
* vl-file-directory-p
** (vl-file-directory-p path)
判断文件夹是否存在
* vl-filename-base
** (vl-filename-base filename)
去掉文件的路径和扩展名，返回文件的名称
* vl-filename-extension
** (vl-filename-extension filename)
返回文件的扩展名，而去掉文件名中的其他部分
* vl-filename-mktemp
** (vl-filename-mktemp [pattern directory extension])
为临时文件计算唯一的文件名
* vl-file-rename
** (vl-file-rename old-filename new-filename)
重命名文件
* vl-file-size
** (vl-file-size filename)
获取文件的大小（字节）
* vl-file-systime
** (vl-file-systime filename)
返回指定文件的上一次修改时间
* vl-get-resource
** (vl-get-resource text-file)
返回 VLX 中保存的 .txt 文件中的文字
* vl-list-exported-functions
** (vl-list-exported-functions [appname])
列出输出的函数，appname为已加载的vlx应用，不包含.vlx扩展名。
* vl-list-length
** (vl-list-length list-or-cons-object)
计算表的长度
* vl-list->string
** (vl-list->string char-codes-list)
将一系列与整数表相关联的字符组合成字符串 。
* vl-load-all
** (vl-load-all filename)
将文件加载到所有打开的 AutoCAD 文档中，以及在当前 AutoCAD 任务中后续打开的任何文档中
* vl-load-com
** (vl-load-com)
将 Visual LISP 扩展功能加载到 * false，false
* vl-load-reactors
** (vl-load-reactors)
加载反应器支持函数
* vl-member-if
** (vl-member-if predicate-function lst)
检测测试每一个表成员都符合给定的测试函数
* vl-member-if-not
** (vl-member-if-not predicate-function lst)
检测测试论断是否对表成员中的一个为 nil
* vl-position
** (vl-position symbol lst)
返回指定表项目的索引
* vl-prin1-to-string
** (vl-prin1-to-string data)
返回 LISP 数据的字符串表示，就象它是由 prin1 函数输出的一样
* vl-propagate
** (vl-propagate 'symbol)
将变量的值复制到所有打开的文档名称空间（并在当前 AutoCAD 任务中打开的所有后续图形中设置它的值）
* vl-registry-delete
** (vl-registry-delete reg-key [val-name])
从 Winows 注册表中删除指定的主键或值
* vl-registry-descendents
** (vl-registry-descendents reg-key [val-names])
返回指定注册表键的子键或值名称的列表
* vl-registry-read
** (vl-registry-read reg-key [val-name])
对于指定的主键/值对，返回 Winodws 注册表存储的数据
* vl-registry-write
** (vl-registry-write reg-key [val-name val-data])
在 Windows 注册表中创建主键
* vl-remove
** (vl-remove element-to-remove lst)
删除表中的元素
* vl-remove-if
** (vl-remove-if predicate-function lst)
返回由所提供表中的所有不满足测试函数的元素组成的表
* vl-remove-if-not
** (vl-remove-if-not predicate-function lst)
返回由所提供表中的所有能通过测试函数的元素组成的表
* vl-some
** (vl-some predicate-functionlist [list] &rest)
检查论断是否对某个元素组合不为 nil
* vl-sort
** (vl-sort lst comparison-function)
根据给定的比较函数来对表中的元素排序
* vl-sort-i
** (vl-sort-i lst comparison-function)
根据给定的比较函数对表中的元素排序，并返回元素的索引号
* vl-string-elt
** (vl-string-elt "string" position)
返回字符串中指定位置字符的 ASCII 表示
* vl-string-left-trim
** (vl-string-left-trim char-set "string")
返回从源字符串首端开始，挨个删除所提供的字符集中的字符(遇到不属于字符集中的则结束)后的字符串
* vl-string-mismatch
** (vl-string-mismatch str1 str2 [pos1 pos2 ignore-case-p])
返回两个字符串中从指定位置开始，最长的共同前缀的长度
* vl-string-position
** (vl-string-position char-code str [start-pos [from-end-p]])
在字符串中查找具有指定 ASCII 码的字符
* vl-string-right-trim
** (vl-string-right-trim char-set "string")
返回从源字符串尾端开始，挨个删除所提供的字符集中的字符(遇到不属于字符集中的则结束)后的字符串
* vl-string-search
** (vl-string-search pattern "string" [start-pos])
在字符串中搜索指定子串
* vl-string-subst
** (vl-string-subst new-str pattern "string" [start-pos])
返回从头起或从指定位置起，替换一次子字符串后的字符串
* vl-string-translate
** (vl-string-translate source-set dest-set str)
在字符串中替换字符
* vl-string-trim
** (vl-string-trim char-set str)
返回从源字符串首端和尾端开始，分别挨个删除所提供的字符集中的字符(分别遇到不属于字符集中的则分别结束)后的字符串
* vl-symbol-name
** (vl-symbol-name symbol)
返回包含某符号名的字符串
* vl-symbolp
** (vl-symbolp obj)
检测测试指定对象是否为符号
* vl-symbol-value
** (vl-symbol-value symbol)
返回当前绑定到符号的值
* vl-unload-vlx
** (vl-unload-vlx appname)
卸载已经加载到自己的名称空间的 VLX 应用程序
* vl-vbaload
** (vl-vbaload filename)
加载 Visual Basic 工程
* vl-vbarun
** (vl-vbarun macroname)
运行 Visual Basic 宏
* vl-vlx-loaded-p
** (vl-vlx-loaded-p appname)
检测测试某独立名称空间当前是否加载
* vlisp-compile
** (vlisp-compile 'mode filename [output-filename])
将 AutoLISP 源代码编译到 FAS 文件
支持的平台：仅 Windows
参数：
'mode 
类型：符号
编译器模式，可以是以下符号之一：

st 标准版本模式 - 生成最小的输出文件，适合包含单个文件的程序。

lsm间接优化和链接 - 优化编译后的文件，但不创建对编译代码中编译函数的直接引用。

lsa直接优化和链接 - 优化编译后的文件，并创建对编译代码中编译函数的直接引用（而不是创建对函数符号的直接引用）。

注意:这两个优化选项最适合大型和复杂程序。
优化的基本功能如下：
链接函数调用可创建对编译代码中编译函数的直接引用，而不是函数符号。此功能可提高编译代码的性能，并在运行时保护代码以防止函数重定义。
删除函数名称以提高编译代码的安全性并减少程序大小和加载时间。
删除所有局部变量的名称并直接链接其引用。这还使编译的代码更加安全，并减少程序大小和加载时间。

filename
类型：字符串
AutoLISP 源文件名。如果源文件位于 AutoCAD 支持文件搜索路径中，则指定文件名时可以省略路径。如果省略文件扩展名，则假定使用 .lsp。

output-filename
类型：字符串
编译的输出文件名。如果未指定输出文件，vlisp-compile将使用与输入文件相同的名称命名输出，但将扩展名替换为 .fas。

注意:如果指定输出文件名但未指定输入或输出文件的路径名，vlisp-compile 会将输出文件放置在 AutoCAD 安装目录中。

返回值
类型：T 或 nil
如果编译成功，则为 T；否则为 nil。
* error,自定义错误处理
** (*error* msg)
用户定义的错误处理函数。
* pop-error-mode,恢复错误模式
** (*pop-error-mode*)
错误处理函数，使用 *push-error-using-command* 或 *push-error-using-stack* 的前一次调用

返回T值。

在用之前定义的 *error*处理程序替换自定义的*error*处理程序函数后，应调用*pop-error-mode*。


注意:在*error*处理程序中使用command-s函数时，不需要此函数。

* push-error-using-command
** (*push-error-using-command*)
错误处理函数，指示在自定义*Error*处理程序中使用命令函数
返回T值。

在定义包含命令函数用法的自定义*error*处理程序函数后，应使用command*调用*push error。

使用命令*push-error-using-command*时，您只能访问全局变量，而不能访问自定义*error*处理程序中发生错误的函数中定义的任何局部变量。如果需要访问局部变量，请将命令函数的任何实例替换为command-s函数，并使用 *push-error-using-stack*代替。

注意:在本地自定义*error*处理程序中使用命令函数时，无法使用此函数。
* push-error-using-stack
** (*push-error-using-stack*)
错误处理函数，指示在自定义*Error*处理程序中使用AutoLISP堆栈中的变量

Remarks
Allows access to the local AutoLISP variables on the stack defined within the function where the error occurred from your custom *error* handler. A call to the *push-error-using-stack* function overrides a previous call to *push-error-using-command*.

If *push-error-using-command* or *push-error-using-stack* are not called, by default AutoLISP works as if *push-error-using-stack* was called.

注意:This function cannot be used when the command function is used within the local custom *error* handler.
