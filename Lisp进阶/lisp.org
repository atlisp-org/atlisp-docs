* lisp 风格
** mapcar
最常使用的是 mapcar ，接受一个函数以及一个或多个列表，并返回把函数应用至每个列表的元素的结果，直到有的列表没有元素为止。

mapcar 后跟的 函数 需要几个参数，再后面就需要几个 作为参数的列表，如下面的代码,函数 需要两个参数，那么后面就需要跟两个表，参数表A和参数表B

返回结果也是一个表。

#+begin_src
  (defun 函数 (参数A 参数B) ...) ;; 函数 定义，有两个参数
  (mapcar '函数 参数表A 参数表B) ;; 返回 结果表
#+end_src
#+begin_src mermaid
  flowchart LR;
     A(函数) -->P1 & P2 & P3 & Pn
     subgraph 参数表A
         P1(参数A1)
         P2(参数A2)
         P3(参数A3)
         Pn(参数An)      
     end

     subgraph 参数表B
         P21(参数B1)
         P22(参数B2)
         P23(参数B3)
         P2n(参数Bn)      
     end
     subgraph 结果表
         R1(结果1)
         R2(结果2)
         R3(结果3)
         Rn(结果n)      
     end
     P1-->P21-->R1
     P2-->P22-->R2
     P3-->P23-->R3
     Pn-->P2n-->Rn
#+end_src
** lambda
上例中 如果 函数 只在 mapcar 中使用，不在其它地方重复使用，我们可以把这个函数定义成匿名函数。

也就是用了就扔那种。

#+begin_src
  (mapcar '(lambda (参数A 参数B) ...)  参数表A 参数表B) ;; 返回 结果表
#+end_src

** apply

#+begin_src lisp
  (apply 'fun '(para1 para2 para2 paran))
  ;;等价于
  (fun para1 para2 para3 paran)
#+end_src
